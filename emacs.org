# Created 2018-07-02
#+OPTIONS: toc:4 h:4
#+OPTIONS: tags:nil
#+TITLE: Jason Graham's Emacs configuration
#+AUTHOR: Jason Graham
#+STARTUP: overview
#+PROPERTY: tangle yes
#+EXCLUDE_TAGS: noexport

* Todo
 - [X] Move custom to separate file
 - [ ] Additional ORG setup
 - [ ] Fix startup frame size

* Configuration

To load this, run =(org-babel-load-file "~/emacs.org")=.

** About me

** Personal information

#+begin_src emacs-lisp
  (message "
  ███████╗███╗   ███╗ █████╗  ██████╗███████╗██╗
  ██╔════╝████╗ ████║██╔══██╗██╔════╝██╔════╝██║
  █████╗  ██╔████╔██║███████║██║     ███████╗██║
  ██╔══╝  ██║╚██╔╝██║██╔══██║██║     ╚════██║╚═╝
  ███████╗██║ ╚═╝ ██║██║  ██║╚██████╗███████║██╗
  ╚══════╝╚═╝     ╚═╝╚═╝  ╚═╝ ╚═════╝╚══════╝╚═╝
  ")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Jason Graham"
      user-mail-address "jgraham20@gmail.com")
#+END_SRC

** Intialize

 #+BEGIN_SRC emacs-lisp
    ;;----------------------------------------------------------------------------
    ;; Adjust garbage collection thresholds during startup, and thereafter
    ;;----------------------------------------------------------------------------
    (setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))

    (eval-and-compile
     (setq gc-cons-threshold 402653184
           gc-cons-percentage 0.6))

    (setq mac-option-modifier 'meta)
    (setq mac-command-modifier 'super)
    (setq mac-pass-command-to-system nil)

   (setq-default
    cursor-type '(bar . 5)
    enable-recursive-minibuffers t
    inhibit-startup-screen t
    use-dialog-box nil
    vc-follow-symlinks t

    truncate-lines t

    disabled-command-function nil)
    (fset 'yes-or-no-p 'y-or-n-p)

    (setq warning-minimum-level :error)
    (add-to-list 'default-frame-alist '(fullscreen . maximized))

#+END_SRC

** Set up use-package
 #+BEGIN_SRC emacs-lisp

   (eval-and-compile
     (setq load-prefer-newer t
         package-user-dir "~/.emacs.d/elpa"
         package--init-file-ensured t
         package-enable-at-startup nil)

   (unless (file-directory-p package-user-dir)
     (make-directory package-user-dir t)))

   (setq use-package-verbose t)

   (eval-and-compile
     (setq load-path (append load-path (directory-files package-user-dir t "^[^.]" t))))

   (eval-when-compile
     (require 'package)

    (unless (assoc-default "melpa-stable" package-archives)
     (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t))
    (unless (assoc-default "melpa" package-archives)
     (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t))
    (unless (assoc-default "gnu" package-archives)
    (add-to-list 'package-archives '("gnu"   . "http://elpa.gnu.org/packages/") t))
   (unless (assoc-default "org" package-archives)
     (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t))
   (unless (assoc-default "marmalade" package-archives)
     (add-to-list 'package-archives '("marmalade" . "https://marmalade-repo.org/packages/") t))
   (unless package--initialized (package-initialize t))
   (unless (package-installed-p 'use-package)
     (package-refresh-contents)
     (package-install 'use-package))
   (require 'use-package)
   (setq use-package-always-ensure t))

   (use-package delight
     :defer t)

   (use-package diminish
     :defer t)

   (setq org-directory "~/Dropbox/Notes/")
   (setq org-default-notes-file (concat org-directory "organizer.org"))

   (defun load-directory (dir)
     (let ((load-it (lambda (f)
            (load-file (concat (file-name-as-directory dir) f)))
          ))
     (mapc load-it (directory-files dir nil "\\.el$"))))

   (add-to-list 'load-path "~/.emacs.d/lisp/")

   (load-directory "~/.emacs.d/lisp")
   (byte-recompile-directory (expand-file-name "~/.emacs.d/lisp") 0)
   ;;(setq pop-up-frames t)
   ;;(frames-only-mode)

 #+END_SRC

** Minimal UI

#+BEGIN_SRC emacs-lisp
   (scroll-bar-mode -1)
   (tool-bar-mode   -1)
   (tooltip-mode    -1)
   (menu-bar-mode   1)
  ;; (desktop-save-mode 1)

   ;;(set-default-font "Hack 14")
   (add-to-list 'default-frame-alist '(font . "Hack-14:spacing=100"))

   ;Set up the Fringe
   (define-fringe-bitmap 'tilde [64 168 16] nil nil 'center)
   (set-fringe-bitmap-face 'tilde 'fringe)

   (use-package eyebrowse
    :ensure t
    :config
     (eyebrowse-mode t))

   (use-package vscode-icon
    :ensure t
    :commands (vscode-icon-for-file))

   (use-package shackle
    :ensure t
    :init
      (setq shackle-rules '((compilation-mode :noselect t))
            shackle-default-rule '(:select t))
      (setq helm-display-function 'pop-to-buffer) ; make helm play nice
      (setq shackle-rules '(("\\`\\*helm.*?\\*\\'" :regexp t :align t :size 0.4)))
    :config (shackle-mode)
   )

  (use-package imenu-list
   :ensure t
   :demand t
   :config
   (setq imenu-list-focus-after-activation t)
   (general-define-key :keymaps 'imenu-list-major-mode-map
                       :states '(normal)
                       "|" 'imenu-list-minor-mode
                       "RET" 'imenu-list-goto-entry
                       "i" 'imenu-list-goto-entry
                       "q" 'imenu-list-quit-window)

   )

#+END_SRC

** Set up Tabbar

#+BEGIN_SRC emacs-lisp
   (use-package tabbar
    :ensure t
    :config
     (tabbar-mode)
     (tabbar-local-mode t))

#+END_SRC

** Set up Evil Mode
#+BEGIN_SRC emacs-lisp

;; Vim mode
(use-package evil
  :ensure t
  :config
  (evil-mode 1))

(use-package evil-escape
  :ensure t
  :init
  (setq-default evil-escape-key-sequence "jk")
  :config
  (evil-escape-mode 1))

 (use-package evil-anzu
    :demand t
    :after (evil))


#+END_SRC

** Set up the theme and mode line
#+BEGIN_SRC emacs-lisp
  ;; Theme

  (load-theme 'gruvbox t)


   (use-package smart-mode-line
    :ensure t
    :init
     (setq sml/theme 'respectful)
     (setq sml/no-confirm-load-theme t)
     (sml/setup)
    :config
      (setq sml/shorten-directory t
            sml/shorten-modes t)
      (rich-minority-mode 1)
      (setf rm-blacklist "")
      (add-to-list 'sml/replacer-regexp-list '("^~/Notes/" ":org:"))
      (add-to-list 'sml/replacer-regexp-list '("^~/blog/" ":blog:"))
      (add-to-list 'sml/replacer-regexp-list '("^~/Dropbox/" ":DB:")))

;; Hide minor modes from modeline
;(use-package rich-minority
;  :config
;  (rich-minority-mode 1)
;  (setf rm-blacklist ""))

;; Set colors to distinguish between active and inactive windows
;;(set-face-attribute 'mode-line nil :background "SlateGray1")
;;(set-face-attribute 'mode-line-inactive nil :background "grey93")

#+END_SRC

** Set up Ivy
  #+BEGIN_SRC emacs-lisp
           (use-package ivy
             :ensure t
             :demand t
             :config
     (setq ivy-use-virtual-buffers t
           enable-recursive-minibuffers t
           ivy-height 5
           ivy-use-selectable-prompt t
           ivy-display-style 'fancy
           ivy-initial-inputs-alist nil ; remove initial ^ input.
           ivy-extra-directories nil ; remove . and .. directory.
           ivy-wrap nil
     )


     (setq ivy-count-format "(%d/%d) ")
     ;; Create and delete a view
     (global-set-key (kbd "C-c v") 'ivy-push-view)
     (global-set-key (kbd "C-c V") 'ivy-pop-view)
             (ivy-mode t))

     (use-package counsel
             :ensure t
             :demand t
             :config)

     (use-package perspective
        :ensure t
        :config
          (persp-mode))

     (use-package persp-projectile
        :ensure t)

     (use-package swiper
             :ensure t
             :demand t
             :config
             (ivy-mode t)

(setq ivy-use-virtual-buffers t)
(setq enable-recursive-minibuffers t))

     (use-package avy
             :ensure t
             :demand t
             :config
             (defun avy-line-saving-column ()
               (interactive)
               (let ((col (current-column)))
                 (avy-goto-line)
                 (move-to-column col)))
             )

    (use-package all-the-icons-ivy
          :config
          (all-the-icons-ivy-setup))

         (use-package eyebrowse
          :ensure t)
     (ivy-mode 1)
    (global-set-key [remap switch-to-buffer] 'ivy-switch-buffer)

    (use-package ivy-rich
     :config
      (ivy-rich-mode 1)
      (setq ivy-rich-path-style 'abbrev)) ;; Abbreviate paths using abbreviate-file-name (e.g. replace “/home/username” with “~”)

  #+END_SRC

** Set up Helm
#+BEGIN_SRC emacs-lisp
(use-package helm
  :defer t
  :init
  (setq helm-M-x-fuzzy-match t
	helm-mode-fuzzy-match t
	helm-buffers-fuzzy-matching t
	helm-recentf-fuzzy-match t
	helm-locate-fuzzy-match t
	helm-semantic-fuzzy-match t
	helm-imenu-fuzzy-match t
	helm-completion-in-region-fuzzy-match t
	helm-candidate-number-list 150
	helm-split-window-in-side-p t
	helm-move-to-line-cycle-in-source t
	helm-echo-input-in-header-line t
	helm-autoresize-max-height 0
	helm-autoresize-min-height 20))


#+END_SRC

** Set up Dired

#+BEGIN_SRC emacs-lisp
(use-package dired
   :ensure nil
   :defer t
   :bind* (("C-x d" . dired-other-window)
           ("C-x C-d" . dired))
   :commands (dired)
   :config
   (setq dired-use-ls-dired nil)
   (use-package dired-x
     :ensure nil
     :bind* (("C-x C-'" . dired-jump))
     :commands (dired-omit-mode)
     :init
     (add-hook 'dired-load-hook (lambda () (load "dired-x")))
     (add-hook 'dired-mode-hook #'dired-omit-mode)
     :config
     (setq dired-omit-verbose nil)
     (setq dired-omit-files
           (concat dired-omit-files "|^.DS_Store$\\|^.projectile$\\|^.git$"))))

(use-package dired-sidebar
  :bind (("C-x C-n" . dired-sidebar-toggle-sidebar))
  :ensure t
  :commands (dired-sidebar-toggle-sidebar)
  :init
  (add-hook 'dired-sidebar-mode-hook
            (lambda ()
              (unless (file-remote-p default-directory)
                (auto-revert-mode))))
  :config
  (push 'toggle-window-split dired-sidebar-toggle-hidden-commands)
  (push 'rotate-windows dired-sidebar-toggle-hidden-commands)

  (setq dired-sidebar-subtree-line-prefix "__")
  (setq dired-sidebar-theme 'vscode)
  (setq dired-sidebar-use-term-integration t)
  (setq dired-sidebar-use-custom-font t))

#+END_SRC

** Set up iBuffer
#+BEGIN_SRC emacs-lisp
(use-package ibuffer :demand t)

(use-package ibuffer-sidebar
  :load-path "~/.emacs.d/lisp/ibuffer-sidebar"
  :ensure nil
  :commands (ibuffer-sidebar-toggle-sidebar)
  :config
  (setq ibuffer-sidebar-use-custom-font t)
  (setq ibuffer-sidebar-face `(:family "Helvetica" :height 140)))


#+END_SRC
** Set up ag
#+BEGIN_SRC emacs-lisp
(use-package ag
 :ensure t
 :defer t)
#+END_SRC

** Set up eshell
#+BEGIN_SRC emacs-lisp
(require 'eshell)
(require 'em-smart)
(setq eshell-where-to-jump 'begin)
(setq eshell-review-quick-commands nil)
(setq eshell-smart-space-goes-to-end t)

(use-package shell-pop
  :config
  (custom-set-variables
   '(shell-pop-shell-type (quote ("ansi-term" "*ansi-term*" (lambda nil (ansi-term shell-pop-term-shell)))))
   '(shell-pop-universal-key "s-=")))

#+END_SRC

** Set up restarter
#+BEGIN_SRC emacs-lisp

(use-package restart-emacs
  :ensure t
  :defer t
  :config (setq restart-emacs-restore-frames t))

#+END_SRC

** Set up keybindings

#+BEGIN_SRC emacs-lisp
  ;;Toggle Dired-Sidebar and ibuffer-sidebar together.
  (defun sidebar-toggle ()
  "Toggle both `dired-sidebar' and `ibuffer-sidebar'."
  (interactive)
  (dired-sidebar-toggle-sidebar)
  (ibuffer-sidebar-toggle-sidebar))

  (defun treemacs-sidebar-toggle ()
  "Toggle both `treemacs' and `ibuffer-sidebar'."
  (interactive)
  (treemacs)
  (ibuffer-sidebar-toggle-sidebar))

  (use-package smex
   :ensure t
   :config
     (smex-initialize)
     (global-set-key (kbd "M-x") 'smex)
     (global-set-key (kbd "M-X") 'smex-major-mode-commands))

  (use-package simpleclip
   :ensure t
   :config
    (simpleclip-mode 1))

  ;; Which Key
  (use-package which-key
    :ensure t
    :init
    (setq which-key-separator " ")
    (setq which-key-prefix-prefix "+")
    :config
    (which-key-mode 1))

  ;; Custom keybinding
  (use-package general
    :ensure t
    :config (general-define-key
    :states '(normal visual insert emacs)
    :prefix "SPC"
    :non-normal-prefix "M-SPC"
    "TAB" '(switch-to-prev-buffer :which-key "previous buffer")
    "/" '(swiper :which-key "Swiper")
    "r" '(recentf-open-files :which-key "RecentF Open Files")
    "SPC" '(counsel-M-x :which-key "M-x")
    ;; Magit
    "g" '(:ignore t :which-key "Git - Magit")
    "gs"  '(magit-status :which-key "magit status")
    ;; Buffers
    "b" '(:ignore t :which-key "Buffers")
    "bb"  '(ivy-switch-buffer :which-key "buffers list")
    "bd"  '(kill-this-buffer :which-key "kill buffer")
    ;; Counsel
    "c" '(:ignore t :which-key "Counsel")
    "cf" '(counsel-find-file :which-key "Counsel Find File")
    "cg" '(counsel-git :which-key "Counsel git")
    "cj" '(counsel-git-grep :which-key "Counsel git grep")
    "ck" '(counsel-ag :which-key "Counsel ag")
    "cl" '(counsel-locate :which-key "Counsel locate")
    "ch" '(counsel-minibuffer-history :which-key "Counsel History")
    "cv" '(counsel-push-view :which-key "Counsel Push View")
    "cV" '(counsel-pop-view :which-key "Counsel Pop View")
    ;; Undo
    "u" '(:ignore t :which-key "Undo")
    "uu" '(undo-tree-visualize :which-key "Undo Tree")
    ;; Project
    "p" '(:ignore t :which-key "Project")
    "ps" '(projectile-persp-switch-project :which-key "Persp switch project")
    ;; File
    "f" '(:ignore t :which-key "File")
    "fe" '((lambda () (interactive) (find-file "~/.emacs.d/emacs.org")) :which-key "Edit Configuration")
    "fd"  '(dired :which-key "open dired")
    "fh"  '(helm-find-files :which-key "find files")
    "ff"  '(counsel-find-file :which-key "find files")
    ;; Window
     "w" '(:ignore t :which-key "Windows")
    "wr"  '(evil-window-move-far-right :which-key "move right")
    "wl"  '(evil-window-move-far-left :which-key "move left")
    "wt"  '(evil-window-move-very-top :which-key "move up")
    "wb"  '(evil-window-move-very-bottom :which-key "move bottom")
    "w/"  '(split-window-right :which-key "split right")
    "w-"  '(split-window-below :which-key "split bottom")
    "wx"  '(delete-window :which-key "delete window")
    "wd"  '(delete-window :which-key "delete window")
    ;; Others
    "a" '(:ignore t :which-key "Applications")
    "at"  '(ansi-term :which-key "open terminal")
    "ao"  '(org-mode :which-key "org-mode")
    ;; Tools
    "t" '(:ignore t :which-key "Tools")
    "tt"  '(treemacs :which-key "treemacs")
    "tc" '(cider-jack-in :which-key "Cider Jack In")
    "tb"  '(treemacs-sidebar-toggle :which-key "treemacs-sidebar")
    "td"  '(dired-sidebar-toggle-sidebar :which-key "dired-sidebar")
    "ts"  '(sidebar-toggle :which-key "toggle-sidebar")
    ;; Quit
    "q" '(:ignore t :which-key "Quit")
    "qq"  (general-simulate-key "C-u" :state 'restart-emacs) :which-key "restart -Q"))

  (setq ns-use-proxy-icon  nil)
  (setq frame-title-format nil)

#+END_SRC

** Set up Ace Window
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :defer t
  :init
  (progn
    (global-set-key (kbd "<f9>") 'ace-window)
    (global-set-key (kbd "M-[") 'ace-window)
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    ;;more info at https://github.com/abo-abo/ace-window
    )
  )
#+END_SRC

** Set up Treemacs

This is the default setup from the treemacs page on Github.

#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs              (if (executable-find "python") 3 0)
          treemacs-deferred-git-apply-delay   0.5
          treemacs-file-event-delay           5000
          treemacs-file-follow-delay          0.2
          treemacs-follow-after-init          t
          treemacs-follow-recenter-distance   0.1
          treemacs-goto-tag-strategy          'refetch-index
          treemacs-indentation                2
          treemacs-indentation-string         " "
          treemacs-is-never-other-window      nil
          treemacs-no-png-images              nil
          treemacs-project-follow-cleanup     nil
          treemacs-recenter-after-file-follow nil
          treemacs-recenter-after-tag-follow  nil
          treemacs-show-hidden-files          t
          treemacs-silent-filewatch           nil
          treemacs-silent-refresh             nil
          treemacs-sorting                    'alphabetic-desc
          treemacs-space-between-root-nodes   t
          treemacs-tag-follow-cleanup         t
          treemacs-tag-follow-delay           1.5
          treemacs-width                      35)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null (executable-find "python3"))))
      (`(t . t)
       (treemacs-git-mode 'extended))
      (`(t . _)
       (treemacs-git-mode 'simple))))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-evil
  :after treemacs evil
  :ensure t)

(use-package treemacs-projectile
  :after treemacs projectile
  :ensure t)



#+END_SRC
** Set up undo-tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree :ensure t)
#+END_SRC

* Set up Source Code Stuff
** Aggressive indent
  #+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :ensure t
    :config)
  #+END_SRC

** Company Mode
  #+BEGIN_SRC emacs-lisp
(use-package company
:demand t
 :init
  (progn
    (setq company-idle-delay 0.2
          company-minimum-prefix-length 2
          company-require-match nil
          company-selection-wrap-around t
          company-dabbrev-ignore-case nil
          company-dabbrev-downcase nil))
 :config
 (global-company-mode)

 (define-key company-active-map [tab] 'company-complete)
 (define-key company-active-map (kbd "C-n") 'company-select-next)
 (define-key company-active-map (kbd "C-p") 'company-select-previous))

 #+END_SRC

** Set up flycheck
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
   :ensure t
   :init
    (when (memq window-system '(mac ns x))
          (exec-path-from-shell-initialize)))
  (setq ispell-program-name "aspell")
  (setq ispell-silently-savep t)
  (use-package flycheck
   :ensure t
   :init (global-flycheck-mode))
  (diminish 'flyspell-mode "Fly")
(setq flyspell-duplicate-distance 0)
#+END_SRC

** Set up Git
#+BEGIN_SRC emacs-lisp
;;; Magit
(use-package magit
  :config
  (require 'evil-magit))

(use-package evil-magit
  :after (magit))

(use-package diff-hl
  :ensure t
  :config
    (diff-hl-mode))

(use-package git-gutter
    :ensure t
    :config
    (global-git-gutter-mode 't)
  (global-git-gutter-mode 't)
  (set-face-background 'git-gutter:modified 'nil)   ;; background color
  (set-face-foreground 'git-gutter:added "green4")
  (set-face-foreground 'git-gutter:deleted "red")
    :diminish git-gutter-mode)

(use-package git-timemachine
  :ensure t)

(use-package gist
  :ensure t)

#+END_SRC

** Set up YASnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
  :demand t
  :config
  (yas-global-mode 1))

#+END_SRC

** Set up Projectile
#+BEGIN_SRC emacs-lisp
  ;; Projectile
  (use-package projectile
   :ensure t
   :delight '(:eval (concat "(P)" (projectile-project-name)))
   :init
    (setq projectile-require-project-root nil)
    :config
    (projectile-mode 1))
  ;; All The Icons
  (use-package all-the-icons :ensure t)

(setq projectile-completion-system 'ivy)

  (use-package counsel-projectile
    :ensure t
    :config
    (add-hook 'after-init-hook 'counsel-projectile-mode))

#+END_SRC

** Set up Clojure/Lisp
#+BEGIN_SRC emacs-lisp

    (use-package lispy
     :demand t
     :init
     (add-hook 'emacs-lisp-mode-hook (lambda () (lispy-mode 1))))

    (use-package cider
     :ensure t
     :config
      (setq cider-repl-display-help-banner nil)
    )

    (use-package clojure-mode
     :ensure t)

    (use-package smartparens
      :demand t
      :init
      (add-hook 'clojure-mode-hook 'turn-on-smartparens-strict-mode)
      (add-hook 'cide-clojure-interaction-mode-hook 'turn-on-smartparens-strict-mode)
      (add-hook 'lisp-interaction-mode-hook 'turn-on-smartparens-strict-mode)
      (add-hook 'cider-repl-mode-hook 'turn-on-smartparens-strict-mode)
      (add-hook 'emacs-lisp-mode-hook 'turn-on-smartparens-strict-mode)
      :config
      (setq sp-navigate-interactive-always-progress-point t)

      (sp-local-pair 'emacs-lisp-mode "'" nil :actions nil)
      (sp-local-pair 'clojure-mode "'" nil :actions nil)
      (sp-local-pair 'lisp-interaction-mode "'" nil :actions nil)
      (sp-local-pair 'clojure-interaction-mode "'" nil :actions nil)
      (sp-local-pair 'cider-repl-mode "'" nil :actions nil)


      (smartparens-global-mode 1)
      )

    (use-package evil-smartparens
      :demand t
      :config)

    (general-def 'normal
      ">" (general-key-dispatch 'evil-shift-right
            ")" 'sp-forward-slurp-sexp
            "(" 'sp-backward-barf-sexp)
      "<" (general-key-dispatch 'evil-shift-left
            ")" 'sp-forward-barf-sexp
            "(" 'sp-backward-slurp-sexp))

  (use-package rainbow-mode
   :ensure t
   :init
  (add-hook 'prog-mode-hook (rainbow-mode))
  (add-hook 'css-mode-hook 'rainbow-mode)
  (add-hook 'scss-mode-hook 'rainbow-mode))

#+END_SRC

** Disable Backups
#+BEGIN_SRC emacs-lisp
;; Disable backup files
(setq make-backup-files nil) ; stop creating backup~ files
(setq auto-save-default nil) ; stop creating #autosave# files
#+END_SRC
** Multiple cursors
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :config
  (setq mc/always-run-for-all 1)
  (global-set-key (kbd "s-d") 'mc/mark-next-like-this)        ;; Cmd+d select next occurrence of region
  (global-set-key (kbd "s-D") 'mc/mark-all-dwim)              ;; Cmd+Shift+d select all occurrences
  (global-set-key (kbd "M-s-d") 'mc/edit-beginnings-of-lines) ;; Alt+Cmd+d add cursor to each line in region
  (define-key mc/keymap (kbd "<return>") nil))
#+END_SRC
** Python
#+BEGIN_SRC emacs-lisp

(setq python-indent 2)
(use-package elpy
 :ensure t
 :config (elpy-enable))

(use-package pyenv-mode
 :ensure t)

;;fix formattings
(setq ansi-color-for-comint-mode t)
;;(setq python-shell-interpreter "ipython"
;;      python-shell-interpreter-args "--simple-prompt -i")

;;the following is maybe useful at some point in time, but for now just start your conda virtaula environment before starting emacs to use it in your python IDE
;;automatically activate python3 env, taken from http://emacs.stackexchange.com/questions/18059/how-to-activate-python-virtual-environment-in-init-file
;;(require 'pyvenv)
;;(pyvenv-activate "python3")
;;choose between conda environments with M-x pyvenv-workon, taken from http://emacs.stackexchange.com/questions/20092/using-conda-environments-in-emacs
;;(setenv "WORKON_HOME" "/Users/markusrademacher/anaconda3/envs")
;;(pyvenv-mode 1)

;; use flycheck not flymake with elpy
(when (require 'flycheck nil t)
  (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
  (add-hook 'elpy-mode-hook 'flycheck-mode))


;; enable autopep8 formatting on save
(use-package py-autopep8
 :config
   (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save))

;; warnings-fix for elpy, taken from https://github.com/jorgenschaefer/elpy/issues/887
(setq python-shell-completion-native-enable nil)

;;helps to get rid of all the warnings when running python, taken from http://emacs.stackexchange.com/questions/30082/your-python-shell-interpreter-doesn-t-seem-to-support-readline
(with-eval-after-load 'python
  (defun python-shell-completion-native-try ()
    "Return non-nil if can trigger native completion."
    (let ((python-shell-completion-native-enable t)
          (python-shell-completion-native-output-timeout
           python-shell-completion-native-try-output-timeout))
      (python-shell-completion-native-get-completions
       (get-buffer-process (current-buffer))
       nil "_"))))

#+END_SRC

* Set up Markdown Mode

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))

(use-package imenu-list
  :ensure t
  :bind (("C-'" . imenu-list-smart-toggle))
  :config
  (setq imenu-list-focus-after-activation t
        imenu-list-auto-resize nil))

 ;; Use visual-line-mode in gfm-mode
(defun my-gfm-mode-hook ()
  (visual-line-mode 1))
(add-hook 'gfm-mode-hook 'my-gfm-mode-hook)

#+END_SRC

* Org Mode
** Initialize Org
#+BEGIN_SRC emacs-lisp


      (use-package org
        :ensure t
        :demand
        :mode ("\\.org\\'" . org-mode)
        :diminish org-indent-mode
        :init
        (require 'org-indent)
        (require 'org-bullets)
        :config
        (setq org-completion-use-ido t
              org-src-fontify-natively t
              org-src-tab-acts-natively t
              org-log-done t
              org-log-done-with-time t
              org-log-refile t
              org-support-shift-select t)

  (setq org-startup-indented t)         ;; Visually indent sections. This looks better for smaller files.
  (setq org-src-tab-acts-natively t)    ;; Tab in source blocks should act like in major mode
  (setq org-src-preserve-indentation t)
  (setq org-log-into-drawer t)          ;; State changes for todos and also notes should go into a Logbook drawer
  (setq org-src-fontify-natively t)     ;; Code highlighting in code blocks
  (setq org-log-done 'time)             ;; Add closed date when todo goes to DONE state
  (setq org-support-shift-select t)    ;; Allow shift selection with arrows.
        (add-hook 'org-mode-hook 'auto-fill-mode))

      (setq org-modules '(org-bbdb
                            org-gnus
                            org-drill
                            org-info
                            org-id
                            ;;org-jsinfo
                            org-habit
                            org-irc
                            org-mouse
                            org-bullets
                            org-protocol
                            org-annotate-file
                            org-eval
                            org-expiry
                            org-interactive-query
                            org-man
                            org-collector
                            org-panel
                            org-screen
                            org-toc))
      (eval-after-load 'org
       '(org-load-modules-maybe t))

       ;; Prepare stuff for org-export-backends
      (setq org-export-backends '(org latex icalendar html ascii))

      (bind-key "C-c c" 'org-capture)
      (bind-key "C-c a" 'org-agenda)
      (bind-key "C-c l" 'org-store-link)
      (bind-key "C-c L" 'org-insert-link-global)
      (bind-key "C-c O" 'org-open-at-point-global)
      ;;(bind-key "<f9> <f9>" 'org-agenda-list)
      ;;(bind-key "<f9> <f8>" (lambda () (interactive) (org-capture nil "r")))
      (use-package toc-org
       :ensure t
       :init
      (add-hook 'org-mode-hook 'toc-org-enable))

      (defun jasong/org-where-am-i ()
      "Return a string of headers indicating where point is in the current tree."
      (interactive)
      (let (headers)
        (save-excursion
    (while (condition-case nil
         (progn
           (push (nth 4 (org-heading-components)) headers)
           (outline-up-heading 1))
       (error nil))))
    (message (mapconcat #'identity headers " > "))))

    (general-define-key :keymaps 'org-mode-map
                        "<f1> <f1>" 'jasong/org-where-am-i)

    (setq org-agenda-files (list "~/Notes/LOG.org" "~/Notes/GTD.org" "~/Notes/church.org" "~/Notes/organizer.org")
          org-default-notes-file "~/Notes/LOG.org")

    (use-package helm-bibtex)
    (use-package biblio)

  (use-package org-ref
              :ensure t
              :init
  (add-hook 'org-mode-hook (lambda () (require 'org-ref))))

  (setq org-ref-completion-library 'org-ref-ivy-cite
        bibtex-dialect 'biblatex)
  (use-package rainbow-delimiters)

#+END_SRC

#+BEGIN_SRC emacs-lisp

(require 'org-mouse)
(require 'org-checklist)
(require 'org-contacts)
(require 'org-panel)
(require 'org-toc)
(require 'org-notify)
(require 'org-depend)

(setq org-id-link-to-org-use-id 'use-existing)
(setq org-startup-indented t)
(setq org-imenu-depth 5)
(setq org-list-allow-alphabetical t)
(add-hook 'org-mode-hook #'toggle-word-wrap)
#+END_SRC
** Tangle/Rebuild on save


#+BEGIN_SRC emacs-lisp

(org-babel-do-load-languages
     'org-babel-load-languages
     '((ditaa . t)
       (plantuml . t)))

;; Don't prompt before running code in org
(setq org-confirm-babel-evaluate nil)

(if (eq system-type 'darwin)
  (setq org-ditaa-jar-path "/usr/local/Cellar/ditaa/0.11.0/libexec/ditaa-0.11.0-standalone.jar")
)

(if (eq system-type 'windows-nt)
  (setq org-ditaa-jar-path "C:/Users/JG186074/Apps/ditaa/ditaa-0.11.0-standalone.jar")
)

(setq org-plantuml-jar-path
      (expand-file-name "~/bin/plantuml.jar"))

;; NeoTree
 (defun my/tangle-dotfiles ()
  "If the current file is in '~/.emacs.d', the code blocks are tangled"
  (when (equal (file-name-directory (directory-file-name buffer-file-name))
               (concat (getenv "HOME") "/.emacs.d/"))
    (org-babel-tangle)
    (message "%s tangled" buffer-file-name)))
 (add-hook 'after-save-hook #'my/tangle-dotfiles)

(add-hook 'after-save-hook #'my/tangle-dotfiles)


(defun my/call-logging-hooks (command &optional verbose)
  "Call COMMAND, reporting every hook run in the process.
Interactively, prompt for a command to execute.

Return a list of the hooks run, in the order they were run.
Interactively, or with optional argument VERBOSE, also print a
message listing the hooks."
  (interactive "CCommand to log hooks: \np")
  (let* ((log     nil)
         (logger (lambda (&rest hooks)
                   (setq log (append log hooks nil)))))
    (my/with-advice
        ((#'run-hooks :before logger))
      (call-interactively command))
    (when verbose
      (message
       (if log "Hooks run during execution of %s:"
         "No hooks run during execution of %s.")
       command)
      (dolist (hook log)
        (message "> %s" hook)))
    log))

(defmacro my/with-advice (adlist &rest body)
  "Execute BODY with temporary advice in ADLIST.

Each element of ADLIST should be a list of the form
  (SYMBOL WHERE FUNCTION [PROPS])
suitable for passing to `advice-add'.  The BODY is wrapped in an
`unwind-protect' form, so the advice will be removed even in the
event of an error or nonlocal exit."
  (declare (debug ((&rest (&rest form)) body))
           (indent 1))
  `(progn
     ,@(mapcar (lambda (adform)
                 (cons 'advice-add adform))
               adlist)
     (unwind-protect (progn ,@body)
       ,@(mapcar (lambda (adform)
                   `(advice-remove ,(car adform) ,(nth 2 adform)))
                 adlist))))

#+END_SRC

** Set up Hugo
#+BEGIN_SRC emacs-lisp
(use-package ox-hugo
  :after ox)

(use-package adaptive-wrap
  :ensure t)

#+END_SRC

** Set up artist-mode
#+BEGIN_SRC emacs-lisp
    (add-hook 'artist-mode-hook
	  (lambda ()
	    (local-set-key (kbd "<f1>") 'org-mode)
	    (local-set-key (kbd "<f2>") 'artist-select-op-pen-line) ; f2 = pen mode
            (local-set-key (kbd "<f3>") 'artist-select-op-line)     ; f3 = line
	    (local-set-key (kbd "<f4>") 'artist-select-op-square)   ; f4 = rectangle
	    (local-set-key (kbd "<f5>") 'artist-select-op-ellipse)  ; f5 = ellipse
	    (local-set-key (kbd "C-z") 'undo)
     ))

    (global-set-key (kbd "C-<f1>") (lambda()
			(interactive)
		        (show-all)
			(artist-mode)))

    ;;; integrate ido with artist-mode
   (defun artist-ido-select-operation (type)
     "Use ido to select a drawing operation in artist-mode"
     (interactive (list (ido-completing-read "Drawing operation: "
                                             (list "Pen" "Pen Line" "line" "straight line" "rectangle"
                                                   "square" "poly-line" "straight poly-line" "ellipse"
                                                   "circle" "text see-thru" "text-overwrite" "spray-can"
                                                   "erase char" "erase rectangle" "vaporize line" "vaporize lines"
                                                   "cut rectangle" "cut square" "copy rectangle" "copy square"
                                                   "paste" "flood-fill"))))
     (artist-select-operation type))


   (defun artist-ido-select-settings (type)
     "Use ido to select a setting to change in artist-mode"
     (interactive (list (ido-completing-read "Setting: "
                                             (list "Set Fill" "Set Line" "Set Erase" "Spray-size" "Spray-chars"
                                                   "Rubber-banding" "Trimming" "Borders"))))
     (if (equal type "Spray-size")
       (artist-select-operation "spray set size")
       (call-interactively (artist-fc-get-fn-from-symbol
			    (cdr (assoc type '(("Set Fill" . set-fill)
					       ("Set Line" . set-line)
					       ("Set Erase" . set-erase)
					       ("Rubber-banding" . rubber-band)
					       ("Trimming" . trimming)
					       ("Borders" . borders)
					       ("Spray-chars" . spray-chars))))))))
    (add-hook 'artist-mode-init-hook
	     (lambda ()
	       (define-key artist-mode-map (kbd "C-c C-a C-o") 'artist-ido-select-operation)
	       (define-key artist-mode-map (kbd "C-c C-a C-c") 'artist-ido-select-settings)))

#+END_SRC

** Set up org-capture

#+BEGIN_SRC emacs-lisp

        (require 'org-protocol)

        (use-package s
         :ensure t)
        (use-package org-download
          :defer t
          )
        (defun make-capture-frame (&optional capture-url)
        "Create a new frame and run org-capture."
        (interactive)
        (make-frame '((name . "capture")
                      (width . 120)
                      (height . 15)))
        (select-frame-by-name "capture")
        (setq word-wrap 1)
        (setq truncate-lines nil)
        (if capture-url (org-protocol-capture capture-url) (org-capture)))

       ;; (require 'org-protocol-capture-html)

        (defun jsg/org-captures()
        (setq org-capture-templates
              '(("t" "Todo"
                 entry (file+headline (lambda () (concat org-directory "organizer.org")) "Task List")
                 "* TODO %?
        DEADLINE: %t
        :LOGBOOK:
        - State \"TODO\"       from \"\"           %U
        :END:
        see: %a\n")
                ("w" "Web site"
                entry (file+headline(lambda () (concat org-directory "organizer.org") "Links")
          "* %a :website:\n\n%U %?\n\n%:initial")
      ("W" "Web site"
       entry
       (file+olp (lambda () (concat org-directory "organizer.org") "Web")
       "* %c :website:\n%U %?%:initial")
      ("l" "A link, for reading later." entry
             (file+headline "notes.org" "Reading List")
             "* %:link\n%u\n\n%c\n\n%i"
             :empty-lines 1)
                ("n" "Note"
                 entry (file+headline (lambda () (concat org-directory "organizer.org")) "Notes")
                 "* %?
        %U\n%a\n")
                ("b" "Book" entry (file+headline (lambda () (concat org-directory "organizer.org")) "Books")
                 "* %?
        (C-c C-w to refile to fiction/non-fiction)
        see %a
        entered on %U\n")
                ("q" "Clock (quick)" plain (clock)
                 "%a%?\n")
                ("s" "Emacs tool sharpening"
                 entry (file+olp (lambda () (concat org-directory "organizer.org"))
                                 "Emacs"
                                 "Sharpening list")
                 "* %?
        see %a
        entered on %U\n")
                ("S" "General tool sharpening"
                 entry (file+olp (lambda () (concat org-directory "organizer.org"))
                                 "General sharpening")
                 "* %?
        see %a
        entered on %U\n")
                ("d" "Date"
                 entry (file+datetree+prompt (lambda () (concat org-directory "dates.org")))
                 "* %?
        %t
        see %a\n")
                ("j" "Journal"
                 plain (file+datetree (lambda () (concat org-directory "organizer.org")))
                 "**** <title>\n%U\n\n%?\n")
            ("p" "Protocol" entry (file+headline ,(concat org-directory "organizer.org") "Inbox")
              "* %^{Title}\nSource: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?")
                ("L" "Protocol Link" entry (file+headline ,(concat org-directory "organizer.org") "Inbox")
              "* %? [[%:link][%:description]] \nCaptured On: %U")
                )
        )))
      )
#+END_SRC

** Set up org-todo

#+BEGIN_SRC emacs-lisp
(require 'org-mouse)

(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

(setq org-enforce-todo-dependencies t)
(setq org-log-done 'time)
(setq org-log-note-clock-out nil)

(setq org-todo-keywords
      '((sequence "TODO(t!)" "WAIT(w@/!)" "|" "DONE(d!)" "CANCELED(c@!)")))
(setq org-log-into-drawer "LOGBOOK")

(defun org-summary-todo (n-done n-not-done)
  "Switch entry to DONE when all subentries are done, to TODO otherwise."
  (let (org-log-done org-log-states)   ; turn off logging
    (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

;; from https://lists.gnu.org/archive/html/emacs-orgmode/2012-02/msg00515.html
(defun org-summary-checkboxes ()
  "Switch entry to DONE when all sub-checkboxes are done, to TODO otherwise."
  (save-excursion
    (org-back-to-heading t)
    (let ((beg (point)) end)
      (end-of-line)
      (setq end (point))
      (goto-char beg)
      (if (re-search-forward "\\[\\([0-9]*%\\)\\]\\|\\[\\([0-9]*\\)/\\([0-9]*\\)\\]" end t)
          (if (match-end 1)
              (if (equal (match-string 1) "100%")
                  (org-todo 'done)
                (org-todo 'todo))
            (if (and (> (match-end 2) (match-beginning 2))
                     (equal (match-string 2) (match-string 3)))
                (org-todo 'done)
              (org-todo 'todo)))))))

(add-hook 'org-after-todo-statistics-hook 'org-summary-todo)
(add-hook 'org-checkbox-statistics-hook 'org-summary-checkboxes)

(defun jsg/org-sort-todos ()
  "Sort entries by TODO status"
  (interactive)
  (org-sort-entries nil ?o)
  (outline-hide-leaves))
(add-hook 'org-mode-hook
          (lambda ()
            (local-set-key (kbd "C-c 6") 'jsg/org-sort-todos)))
#+END_SRC

* Post init
 #+BEGIN_SRC emacs-lisp

         (use-package calfw
          :ensure t
          :config
         (setq cfw:display-calendar-holidays nil
         ;; Grid characters
         cfw:fchar-vertical-line ?│
         cfw:fchar-horizontal-line ?─
         cfw:fchar-junction ?┼
         cfw:fchar-top-junction ?┬
         cfw:fchar-top-left-corner ?╭
         cfw:fchar-top-right-corner ?╮
         cfw:fchar-left-junction ?├
         cfw:fchar-right-junction ?┤)
         )
         (require 'calfw-org)
         (require 'calfw-ical)
         (require 'calfw-gcal)

         (jsg/org-captures)
         (menu-bar-mode 1)
         (display-time-mode 1)
         (setq org-startup-indented t)

         (global-hl-line-mode 1)
         (projectile-mode +1)
         (add-hook 'before-save-hook 'delete-trailing-whitespace)
         (diminish 'auto-revert-mode)
         (diminish 'evil-escape-mode)

         (setq gc-cons-threshold 16777216
              gc-cons-percentage 0.1)
         (toggle-frame-maximized)
         (load-file "~/.emacs.d/custom.el")

        (recentf-mode 1)
      (setq recentf-max-menu-items 25)
      (run-at-time nil (* 5 60) 'recentf-save-list)

      (require 'bookmark)

      ;; load bookmarks from file.
      (with-eval-after-load 'bookmark
      (setq-default bookmark-default-file
                (expand-file-name "bookmarks.el" user-emacs-directory))
      (bookmark-maybe-load-default-file))

      (global-set-key "\C-x\ \C-r" 'recentf-open-files)
      (when (fboundp 'winner-mode)
            (winner-mode 1))

      (add-hook 'before-save-hook 'delete-trailing-whitespace)
      (setq-default message-log-max nil)
      ;; Always wrap lines
      (global-visual-line-mode 1)

      (setq split-height-threshold 0)
      (setq split-width-threshold nil)

      ;; Highlight current line
      (global-hl-line-mode 1)

   ;; Store all my org files in ~/org.
(setq org-directory "~/Notes")

;; And all of those files should be in included agenda.
(setq org-agenda-files '("~/Notes"))

(toggle-frame-maximized)

;; Open config file by pressing C-x and then c
(global-set-key (kbd "C-x c") (lambda () (interactive) (find-file "~/.emacs.d/emacs.org")))

 (defun jasong/reload-emacs ()
     "Reload Emacs configuration."
     (interactive)
     (load (expand-file-name "init.el" user-emacs-directory)))

   (defun jasong/reload-all-emacsen ()
     "Execute `jasong/reload-emacs' on all servers."
     (interactive)
     (dolist (instance (directory-files server-socket-dir nil (rx bol (not (any ".")))))
       (unless (equal instance server-name)
         (async-shell-command (format "emacsclient -s %s --eval \"(jasong/reload-emacs)\"" instance)))))

   (defun jasong/server-start (name)
     "Prompt for NAME, then start the Emacs server under that name."
     (interactive "sDaemon name? ")
     (setq server-name name)
     (server-start))

      ;;(server-start)
      (setq initial-scratch-message ";; ╔═╗┌─┐┬─┐┌─┐┌┬┐┌─┐┬ ┬\n;; ╚═╗│  ├┬┘├─┤ │ │  ├─┤\n;; ╚═╝└─┘┴└─┴ ┴ ┴ └─┘┴ ┴\n\n")


 #+END_SRC
